{
    "collab_server" : "",
    "contents" : "shinyServer(function(input, output) {\n  \n  #=================== Action Button ===================\n  values <- reactiveValues(new_image = FALSE)\n  observe({\n    if (input$checkButton_1 == 0) return()\n    values$new_image = TRUE\n  })\n  observe({\n    if (is.null(input$checkButton_2) || input$checkButton_2 == 0)\n      return()\n    values$new_image = FALSE\n  })\n  \n  #=================== Tab : import ===================\n  import_image <- reactive({\n    # input$file will be NULL initially. After the user uploads a file, it will be a data frame .\n    # The 'datapath' column will contain the local filenames where the data can be found.\n    # ?? 何時生成 'datapath' column\n    inFile <- input$file\n    \n    if (is.null(inFile))\n      return(NULL)\n    \n    import_color.image <- readImage(inFile$datapath)\n    # 從ui.R取得的彩色照片\n    import_gray.image <- channel(import_color.image,\"gray\")\n    # 使用EBImage channel function 轉成灰階\n    resize_gray.image <- resize(import_gray.image, 28, 28) \n    # 將圖片轉成 28*28\n    trans_gray.image <- array_reshape(1-resize_gray.image,c(1,28*28))\n    # 將28*28的array轉成list\n    res=POST(url=\"http://5f8c233f-8693-4046-9117-98739a2dcf18.southeastasia.azurecontainer.io/score\",\n             body=list(data = b),\n             encode=\"json\")\n    DisplayRes=httr::content(res)\n\n    return( list(inFile = inFile,\n                 import_color.image = import_color.image,\n                 resize_gray.image = resize_gray.image,\n                 trans_gray.image = trans_gray.image,\n                 DisplayRes = DisplayRes))\n  }) \n  \n#  import_filename <- reactive({\n#    if( values$new_image && !is.null( import_image() )){\n      \n#      import.filename = stringi::stri_extract_first(str = import_image()$inFile$name, regex = \".*(?=\\\\.)\")\n      \n#      filename_1 = paste0(unlist(strsplit(import.filename, \".\", fixed = TRUE))[1],'_',substr(Sys.time(),1,10),'_',gsub(':','',substr(Sys.time(),12,19)),'.png')\n#      filename_2 = paste0('gray_',substr(Sys.time(),1,10),'_',gsub(':','',substr(Sys.time(),12,19)),'.png')\n#    }\n#    return( list(filename_1=filename_1,filename_2=filename_2) )\n#  }) \n  \n  observe({\n    # Run whenever checkButton is pressed\n    if( values$new_image && !is.null( import_image() )){\n      import_color.image = import_image()$import_color.image\n      resize_gray.image = import_image()$resize_gray.image\n      \n      dir.create(file.path(Path, \"output\"), showWarnings = FALSE)\n      writeImage(import_color.image,file=file.path(Path,'output',import_filename()$filename_1))\n#      writeImage(resize_gray.image,file=file.path(Path,'output',import_filename()$filename_2))\n    }\n  }) \n\n\n  output$import_plot <- renderPlot({\n    if( !is.null( import_image() )){\n      plot(import_image()$import_color.image)\n      title(\"Import Image\")\n    }\n  })  \n    \n#  output$gray_plot <- renderPlot({\n#    if( !is.null( import_image() )){\n      #plot(import_image()$resize_gray.image)\n      \n#      gray_im <- import_image()$input_keras[1,,]\n#      gray_im <- t(apply(gray_im, 2, rev)) \n#      image(1:28, 1:28, gray_im, col=gray((0:255)/255), \n#            xaxt='n', main='Input Keras')\n      \n#    }\n#  })\n  \n # ===== Output: result ======\n   output$predictBox <- renderInfoBox({\n    if( values$new_image && !is.null(import_image()) ){\n      predict.result = res\n      infoBox(\n        \"Predict Result\", DisplayRes, icon = icon(\"thumbs-up\", lib = \"glyphicon\"),\n        color = \"blue\", fill = TRUE\n      )\n    }else{\n      predict.result = 'No input image' \n      infoBox(\n        \"\", predict.result, icon = icon(\"thumbs-down\", lib = \"glyphicon\"),\n        color = \"red\", fill = TRUE\n      )\n    }\n    \n  })\n\n  \n  #output$test <- renderPrint({\n  #  import_color.image = import_image()$import_color.image\n  #  if(input$checkButton && !is.null( import_color.image )){\n  #    import_filename()\n  #  }\n  #})\n  \n\n  \n})\n",
    "created" : 1569144093816.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "632617013",
    "id" : "2754F412",
    "lastKnownWriteTime" : 1569562975,
    "last_content_update" : 1569562975909,
    "path" : "~/Downloads/shiny_mnist/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}